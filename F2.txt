#include<bits/stdc++.h>

using namespace std;

//#define int long long

double start = clock();

const int N = 300, K = 9;
int n, m, k, a[N][N], input[N][N], lg[N + 1], sum_row[N], sum_column[N];
long long sum = 0, ans = 0, AA = 0;
int dp[K][K][N][N], value[N][N], dpup[N][N], dpdown[N][N];
vector<pair<int, int>> can;
vector<pair<int, int>> tmp;

int get(int x, int y, int x2, int y2) {
    int lgn = lg[x2 - x + 1];
    int lgm = lg[y2 - y + 1];
    int res = max(dp[lgn][lgm][x][y], dp[lgn][lgm][x2 - (1 << lgn) + 1][y2 - (1 << lgm) + 1]);
    int res2 = max(dp[lgn][lgm][x][y2 - (1 << lgm) + 1] , dp[lgn][lgm][x2 - (1 << lgn) + 1][y]);
    return max(res, res2);
}

void one() {
    ans = max(ans, sum + get(0, 0, n - 1, m - 1));
}

void two() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (i && j) {
                ans = max(ans, sum + value[i][j] + get(0, 0, i - 1, j - 1));
            }
            for (int i2 = 0; i2 < i; i2++) {
                ans = max(ans, sum + value[i][j] + value[i2][j] - a[i][j] - a[i2][j]);
            }
            for (int j2 = 0; j2 < j; j2++) {
                ans = max(ans, sum + value[i][j] + value[i][j2] - a[i][j] - a[i][j2]);
            }
        }
    }
}
void three() {
    if (m >= 3) {
        for (int i = 0; i < n; i++) {
            vector<int> b;
            for (int j = 0; j < m; j++) {
                b.push_back(value[i][j] - 2 * a[i][j]);
            }
            sort(b.rbegin(), b.rend());
            ans = max(ans, sum + b[0] + b[1] + b[2]);
        }
    }
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
            int x = -1e18, y = -1e18;
            for (int i2 = 0; i2 < i; i2++) {
                x = max(x, value[i2][j] - a[i2][j]);
            }
            for (int j2 = 0; j2 < j; j2++) {
                y = max(y, value[i][j2] - a[i][j2]);
            }
            ans = max(ans, x + y + sum + value[i][j] - 2 * a[i][j]);
        }
    }
    if (m >= 3 && n >= 2) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int d = -1e9;
                int x = -1e9, y = -1e9;
                for (int i2 = 0; i2 < n; i2++) {
                    if (i != i2) {
                        d = max(d, value[i2][j]);
                    }
                }
                for (int j2 = 0; j2 < m; j2++) {
                    if (j2 != j) {
                        int z = value[i][j2] - a[i][j2];
                        if (z >= x) {
                            y = x;
                            x = z;
                        } else if (z >= y) {
                            y = z;
                        }
                    }
                }
                ans = max(ans, sum + x + y + d);
            }
        }
    }
    for (int i = 1; i + 1 < n; i++) {
        for (int j = 1; j + 1 < m; j++) {
            ans = max(ans, sum + value[i][j] + get(0, 0, i - 1, j - 1) + get(i + 1, j + 1, n - 1, m - 1));
        }
    }
    for (int i = 1; i + 1 < n; i++) {
        for (int j = 2; j < m; j++) {
            int x = -1e9, y = -1e9;
            for (int j2 = 1; j2 < j; j2++) {
                x = max(x, dpup[i - 1][j2 - 1]);
                y = max(y, dpdown[i + 1][j2 - 1]);
                ans = max(ans, sum + value[i][j] + dpdown[i + 1][j2] + x);
                ans = max(ans, sum + value[i][j] + dpup[i - 1][j2] + y);
            }
        }
    }
}

void solution() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> input[i][j];
        }
    }
    for (int t = 0; t < 4; t++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[m - j - 1][i] = input[i][j];
            }
        }
        swap(n, m);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                input[i][j] = a[i][j];
            }
        }
        sum = 0;
        for (int i = 0; i < n; i++) {
            sum_row[i] = 0;
        }
        for (int j = 0; j < m; j++) {
            sum_column[j] = 0;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                sum_row[i] += a[i][j];
                sum_column[j] += a[i][j];
                sum += a[i][j];
            }
        }
        for (int i = 2; i <= N; i++) {
            lg[i] = lg[i / 2] + 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[0][0][i][j] = sum_row[i] + sum_column[j] - 3 * a[i][j];
                value[i][j] = dp[0][0][i][j];
            }
        }
        for (int j = 0; j < m; j++) {
            for (int i = 0; i < n; i++) {
                dpup[i][j] = value[i][j];
                if (i) {
                    dpup[i][j] = max(dpup[i][j], dpup[i - 1][j]);
                }
            }
            for (int i = n - 1; i >= 0; i--) {
                dpdown[i][j] = value[i][j];
                if (i + 1 < n) {
                    dpdown[i][j] = max(dpdown[i][j], dpdown[i + 1][j]);
                }
            }
        }
        for (int a = 0; a < K; a++) {
            for (int b = 0; b < K; b++) {
                if (a == 0 && b == 0) {
                    continue;
                }
                if (a > 0) {
                    for (int i = 0; i + (1 << a) - 1 < n; i++) {
                        for (int j = 0; j + (1 << b) - 1 < m; j++) {
                            dp[a][b][i][j] = max(dp[a - 1][b][i][j], dp[a - 1][b][i + (1 << (a - 1))][j]);
                        }
                    }
                } else {
                    for (int i = 0; i + (1 << a) - 1 < n; i++) {
                        for (int j = 0; j + (1 << b) - 1 < m; j++) {
                            dp[a][b][i][j] = max(dp[a][b - 1][i][j], dp[a][b - 1][i][j + (1 << (b - 1))]);
                        }
                    }
                }
            }
        }
        if (k == 1) {
            one();
        }
        if (k == 2) {
            two();
        }
        if (k == 3) {
            three();
        }
    }
    cout << ans;
    exit(0);
}

void gen(int i, int k) {
    if ((clock() - start) / CLOCKS_PER_SEC >= 1.45) {
        return;
    }
    if (k == 0) {
        //cout << can[0].first << " " << can[0].second  << " " << (int) can.size() << endl;
        ans = max(ans, AA + sum);
        return;
    }
    if (i == (int) tmp.size()) {
        return;
    }
    gen(i + 1, k);
    int x = tmp[i].first, y = tmp[i].second;
    sum += sum_row[x] + sum_column[y] -3 * a[x][y];
    for (auto [i, j] : can) {
        if (i == x || j == y) {
            sum -= a[i][j] + a[x][y];
        }
    }
    can.push_back({x, y});
    gen(i + 1, k - 1);
    sum -= sum_row[x] + sum_column[y] - 3 * a[x][y];
    can.pop_back();
    for (auto [i, j] : can) {
        if (i == x || j == y) {
            sum += a[i][j] + a[x][y];
        }
    }
}

int data2[N][N], banx[N + 1], bany[N + 1];
pair<int, int> dp2[K][K][N][N];

pair<int, int> f(pair<int, int> x, pair<int, int> y) {
    if (data2[x.first][x.second] >= data2[y.first][y.second]) return x;
    return y;
}

pair<int, int> get2(int x, int y, int x2, int y2) {
    int lgn = lg[x2 - x + 1];
    int lgm = lg[y2 - y + 1];
    pair<int, int> res = f(dp2[lgn][lgm][x][y], dp2[lgn][lgm][x2 - (1 << lgn) + 1][y2 - (1 << lgm) + 1]);
    pair<int, int> res2 = f(dp2[lgn][lgm][x][y2 - (1 << lgm) + 1] , dp2[lgn][lgm][x2 - (1 << lgn) + 1][y]);
    return f(res, res2);
}

int X(pair<int, int> x) {
    if (x.first == -1) return -1e9;
    return data2[x.first][x.second];
}

vector<int> XX, YY;

void build(int kx, int ky) {
    if ((clock() - start) / CLOCKS_PER_SEC >= 0.9) {
        return;
    }
    //cout << kx << " " << ky << endl;
    int res = tmp.size();

    tmp.push_back({-1, -1});

    XX = {-1}, YY = {-1};
    for (int i = 0; i <= n; i++) if (banx[i]) XX.push_back(i);
    for (int j = 0; j <= m; j++) if (bany[j]) YY.push_back(j);
    for (int i = 1; i < (int) XX.size(); i++) {
        if (XX[i] - XX[i - 1] == 1) continue;
        for (int j = 1; j < (int) YY.size(); j++) {
            if (YY[j] - YY[j - 1] == 1) continue;
            pair<int, int> kek = get2(XX[i - 1] + 1, YY[j - 1] + 1, XX[i] - 1, YY[j] - 1);
            if (X(tmp.back()) < X(kek)) {
                tmp.back() = kek;
            }
        }
    }

    if (tmp[res].first == -1) {
        tmp.pop_back();
        return;
    }

    if (kx != 0) {
        banx[tmp[res].first]++;
        build(kx - 1, ky);
        banx[tmp[res].first]--;
    }

    if (ky != 0) {
        bany[tmp[res].second]++;
        build(kx, ky - 1);
        bany[tmp[res].second]--;
    }

    return;
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m >> k;
    if (k <= 3) {
        solution();
    }
    vector<vector<int>> b(n, vector<int> (m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
            AA += a[i][j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            sum_row[i] += a[i][j];
            sum_column[j] += a[i][j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            data2[i][j] = sum_row[i] + sum_column[j] - 3 * a[i][j];
        }
    }
    for (int i = 2; i <= N; i++) {
        lg[i] = lg[i / 2] + 1;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            dp2[0][0][i][j] = {i, j};
        }
    }
    for (int a = 0; a < K; a++) {
        for (int b = 0; b < K; b++) {
            if (a == 0 && b == 0) {
                continue;
            }
            if (a > 0) {
                for (int i = 0; i + (1 << a) - 1 < n; i++) {
                    for (int j = 0; j + (1 << b) - 1 < m; j++) {
                        dp2[a][b][i][j] = f(dp2[a - 1][b][i][j], dp2[a - 1][b][i + (1 << (a - 1))][j]);
                    }
                }
            } else {
                for (int i = 0; i + (1 << a) - 1 < n; i++) {
                    for (int j = 0; j + (1 << b) - 1 < m; j++) {
                        dp2[a][b][i][j] = f(dp2[a][b - 1][i][j], dp2[a][b - 1][i][j + (1 << (b - 1))]);
                    }
                }
            }
        }
    }
    banx[n] = bany[m] = 1;
    build(2 * k - 1, 2 * k - 1);
    sort(tmp.begin(), tmp.end());
    tmp.resize(unique(tmp.begin(), tmp.end()) - tmp.begin());
    gen(0, k);
    cout << ans;
}
