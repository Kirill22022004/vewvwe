#include<bits/stdc++.h>

using namespace std;

template <typename A, typename B>
string to_string(pair<A, B> p);

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string& s) {
    return '"' + s + '"';
}

string to_string(const char& s) {
    string res = "'";
    res += s;
    res += "'";
    return res;
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
    string res = "{";
    for (int i = 0; i < static_cast<int>(v.size()); i++) {
        if (i) res += ", ";
        res += to_string(v[i]);
    }
    res += "}";
    return res;
}

template <size_t N>
string to_string(bitset<N> v) {
    string res = "";
    for (size_t i = 0; i < N; i++) {
        res += static_cast<char>('0' + v[i]);
    }
    return res;
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#define int long long
#define fi first
#define se second
#define pii pair<int, int>
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define eb emplace_back
#define ld long double

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    ld EPS = 1e-9;
    int n;
    cin >> n;
    vector<vector<ld>> a(n, vector<ld> (n + 1, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= n; j++) {
            cin >> a[i][j];
        }
    }
    int tmp = 0;
    for (int v = 0; v < n; v++) {
        int s = tmp;
        for (int i = tmp; i < n; i++) {
            if (abs(a[i][v]) > abs(a[s][v])) {
                s = i;
            }
        }
        if (abs(a[s][v] - 0) < EPS) {
            continue;
        }
        for (int j = 0; j <= n; j++) swap(a[tmp][j], a[s][j]);
        for (int i = 0; i < n; i++) {
            if (i != tmp) {
                ld x = a[i][v] / a[tmp][v];
                for (int j = 0; j <= n; j++) a[i][j] -= a[tmp][j] * x;
            } else {
                ld x = a[tmp][v];
                for (int j = 0; j <= n; j++) a[tmp][j] /= x;
            }
        }
        tmp++;
    }
    for (int i = tmp; i < n; i++) {
        if (abs(a[i][n] - 0) >= EPS) {
            cout << "impossible";
            return 0;
        }
    }
    if (tmp != n) {
        cout << "infinity";
        return 0;
    }
    cout << "single" << endl;
    for (int i = 0; i < n; i++) {
        cout << fixed << setprecision(15) << a[i][n] << " ";
    }
}