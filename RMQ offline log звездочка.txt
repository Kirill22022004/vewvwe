#include<bits/stdc++.h>

using namespace std;

class dsu {
 public:
    vector<int> p, rang, lca;
    int n;
    dsu(int n) : n(n) {
        p.resize(n);
        iota(p.begin(), p.end(), 0);
        lca.resize(n);
        iota(lca.begin(), lca.end(), 0);
        rang.resize(n, 1);
    }
    void clear() {
        iota(p.begin(), p.end(), 0);
        fill(rang.begin(), rang.end(), 1);
    }
    int get(int x) {
        return (x == p[x] ? x : (p[x] = get(p[x])));
    }
    bool unite(int x, int y) {
        int z = x;
        x = get(x);
        y = get(y);
        lca[x] = lca[y] = z;
        if (rang[x] < rang[y]) swap(x, y);
        if (x != y) {
            p[y] = x;
            rang[x] += (rang[x] == rang[y]);
            return true;
        }
        return false;
    }
};

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, a;
    cin >> n >> a;
    dsu G(a + 1);
    int l[n], r[n], c[n], sz = 0;
    vector<long long> dp(a + 1, 0);
    vector<int> st(a + 1, 0);
    for (int i = 0; i < n; i++) {
        cin >> l[i] >> r[i] >> c[i];
    }
    for (int j = a; j >= 0; j--) {
        dp[j] = (long long) 1e9 * (long long) j;
    }
    for (int j = a; j >= 0; j--) {
        while (sz > 0 && dp[st[sz - 1]] >= dp[j]) {
            G.unite(j, st[sz - 1]);
            sz--;
        }
        st[sz] = j;
        sz++;
        for (int i = 0; i < n; i++) {
            int J = j - l[i];
            if (J < 0 || J  + r[i] > a) continue;
            dp[J] = max(dp[J], dp[G.lca[G.get(J + r[i])]] - c[i]);
        }
    }
    cout << dp[0];
}