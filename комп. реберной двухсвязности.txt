vector<int> bicone(const vector<vector<int>>& g) {
    int n = (int) g.size();
    vector<int> parent(n, -1), depth(n), min_depth(n), used(n, false), ts;
    function<void(int, int, int)> dfs = [&] (int v, int pr, int d) {
        depth[v] = d;
        min_depth[v] = d;
        used[v] = true;
        ts.push_back(v);
        parent[v] = pr;
        bool f = false;
        for (auto x : g[v]) {
            if (x == pr) {
                if (!f) {
                    f = true;
                    continue;
                }
            }
            if (used[x]) {
                min_depth[v] = min(min_depth[v], depth[x]);
            } else {
                dfs(x, v, d + 1);
                min_depth[v] = min(min_depth[v], min_depth[x]);
            }
        }
    };
    for (int i = 0; i < n; i++) {
        if (!used[i]) {
            dfs(i, -1, 0);
        }
    }
    vector<int> comp(n);
    int cnt = 0;
    for (auto i : ts) {
        if (parent[i] == -1 || depth[i] == min_depth[i]) {
            comp[i] = cnt++;
        } else {
            comp[i] = comp[parent[i]];
        }
    }
    return comp;
}