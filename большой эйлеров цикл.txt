#include<bits/stdc++.h>

using namespace std;

template <typename A, typename B>
string to_string(pair<A, B> p);

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string& s) {
    return '"' + s + '"';
}

string to_string(const char& s) {
    string res = "'";
    res += s;
    res += "'";
    return res;
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
    string res = "{";
    for (int i = 0; i < static_cast<int>(v.size()); i++) {
        if (i) res += ", ";
        res += to_string(v[i]);
    }
    res += "}";
    return res;
}

template <size_t N>
string to_string(bitset<N> v) {
    string res = "";
    for (size_t i = 0; i < N; i++) {
        res += static_cast<char>('0' + v[i]);
    }
    return res;
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#define int long long
#define fi first
#define se second
#define pii pair<int, int>
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define eb emplace_back
#define ld long double

int n, m;
vector<int> A, B, C, used, usd, ind, usd2;
vector<pii> R;
vector<vector<int>> g, g2;
vector<vector<int>> ans;

void dfs(int v) {
    used[v] = true;
    for (auto i : g[v]) {
        int y = v ^ A[i] ^ B[i];
        if (!usd2[i]) {
            usd2[i] = true;
            if (C[i] == 1) {
                g2[v].pb(usd.size());
                g2[y].pb(usd.size());
                R.pb({v, y});
                usd.pb(0);
            } else {
                R.pb({v, y});
                R.pb({v, y});
                g2[v].pb(usd.size());
                g2[y].pb(usd.size());
                usd.pb(0);
                g2[v].pb(usd.size());
                g2[y].pb(usd.size());
                usd.pb(0);
            }
        }
        if (!used[y]) dfs(y);
    }
}

void solve(int v) {
    while (ind[v] < g2[v].size()) {
        int i = g2[v][ind[v]++];
        if (usd[i]) continue;
        int y = v ^ R[i].fi ^ R[i].se;
        usd[i] = true;
        solve(y);
        ans.back().pb(v);
    }
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    g.resize(n);
    g2.resize(n);
    usd2.resize(m, false);
    for (int i = 0; i < m; i++) {
        int x, y, c;
        cin >> x >> y >> c;
        x--, y--;
        A.pb(x);
        B.pb(y);
        C.pb(c);
        g[x].pb(i);
        g[y].pb(i);
    }
    used.resize(n, false);
    for (int i = 0; i < n; i++) {
        if (used[i]) continue;
        for (auto r : g[i]) {
            if (C[r] == 1) {
                dfs(i);
                break;
            }
        }
    }
    ind.resize(n);
    vector<int> ts;
    for (int i = 0; i < n; i++) {
        if (g2[i].size() % 2 == 1) ts.pb(i);
    }
    int mx = (int) usd.size() - 1;
    set<pii> ban;
    for (int i = 0; i < (int) ts.size(); i += 2) {
        int x = ts[i], y = ts[i + 1];
        g2[x].pb(usd.size());
        g2[y].pb(usd.size());
        ban.insert({min(x, y), max(x, y)});
        R.pb({x, y});
        usd.pb(0);
    }
    for (int i = 0; i < n; i++) {
        if (ind[i] < g2[i].size()) {
            ans.pb(vector<int> ());
            solve(i);
        }
    }
    vector<vector<int>> answer;
    int c = -1;
    for (auto mas : ans) {
        c++;
        int n = mas.size();
        int st = -1;
        for (int i = 0; i < n; i++) {
            int x = mas[i], y = mas[(i + 1) % n];
            if (ban.find({min(x, y), max(x, y)}) != ban.end()) {
                st = i + 1;
            }
        }
        if (st == -1) {
            mas.pb(mas.back());
            answer.pb(mas);
            continue;
        }
        int x = mas[st % n], y = mas[(st - 1 + n) % n];
        ban.erase({min(x, y), max(x, y)});
        vector<int> tmp;
        for (int j = 0; j < n; j++) {
            int i = (st + j) % n;
            if (tmp.size() == 0) {
                tmp.pb(mas[i]);
                continue;
            }
            int x = tmp.back(), y = mas[i];
            if (ban.find({min(x, y), max(x, y)}) != ban.end()) {
                if (tmp.size() > 1) answer.pb(tmp);
                tmp = {y};
                ban.erase({min(x, y), max(x, y)});
            } else {
                tmp.pb(mas[i]);
            }
        }
        if (tmp.size() > 1) answer.pb(tmp);
    }
    cout << (int) answer.size() << '\n';
    for (auto mas : answer) {
        cout << (int) mas.size() << " ";
        for (auto x : mas) cout << x + 1 << " ";
        cout << '\n';
    }
}