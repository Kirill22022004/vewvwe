#define all(X) (X).begin(), (X).end()

struct mst {
    int n;
    vector<vector<int>> t;
    vector<int> a;

    void build(int v, int l, int r) {
        if (l + 1 != r) {
            int m = (l + r) / 2;
            build(v * 2 + 1, l, m);
            build(v * 2 + 2, m, r);
            t[v].resize(t[v * 2 + 1].size() + t[v * 2 + 2].size());
            merge(all(t[v * 2 + 1]), all(t[v * 2 + 2]), t[v].begin());
        } else {
            t[v].push_back(a[l]);
        }
    }

    void build(vector<int> b) {
        n = (int) b.size();
        t.resize(4 * n);
        a = b;
        build(0, 0, n);
    }

    int get(int v, int l, int r, int l1, int r1, int x) {
        if (l1 >= r || l >= r1) {
            return 0;
        }
        if (l1 <= l && r <= r1) {
            return lower_bound(all(t[v]), x) - t[v].begin();
        }
        int m = (l + r) / 2;
        return get(v * 2 + 1, l, m, l1, r1, x) + get(v * 2 + 2, m, r, l1, r1, x);
    }

    int get_smaller(int l, int r, int x) {
        return get(0, 0, n, l, r + 1, x);
    }

    int get_bigger(int l, int r, int x) {
        return r - l + 1 - get_smaller(l, r, x + 1);
    }

    int get(int l, int r, int x, int y) {
        // v in [l, r] x <= v && v <= y
        return get_smaller(l, r, y + 1) - get_smaller(l, r, x);
    }
};