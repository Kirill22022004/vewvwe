#include<bits/stdc++.h>

using namespace std;

#define pb emplace_back

unordered_set<string> used;

struct AXO{
    vector<string> a;
    vector<int> K;
    vector<int> suf, dp;
    vector<tuple<int, int, int>> go;
    vector<int> x;
    AXO() {
        x.resize(3);
        suf.pb(0);
        dp.pb(0);
        go.pb(0, 0, 0);
    }
    void add(string s, int k) {
        int v = 0;
        for (auto c : s) {
            tie(x[0], x[1], x[2]) = go[v];
            int d = c - 'a';
            if (x[d] == 0) {
                x[d] = go.size();
                go.pb(0, 0, 0);
                suf.pb(0);
                dp.pb(0);
            }
            go[v] = {x[0], x[1], x[2]};
            v = x[d];
        }
        dp[v] += k;
        a.pb(s);
        K.pb(k);
    }
    void bfs() {
        queue<int> st({0});
        while (st.size() > 0) {
            int v = st.front();
            st.pop();
            tie(x[0], x[1], x[2]) = go[v];
            if (x[0] == 0) {
                x[0] = get<0> (go[suf[v]]);
            } else {
                st.push(x[0]);
                if (v) {
                    suf[x[0]] = get<0> (go[suf[v]]);
                    dp[x[0]] += dp[suf[x[0]]];
                }
            }
            if (x[1] == 0) {
                x[1] = get<1> (go[suf[v]]);
            } else {
                st.push(x[1]);
                if (v) {
                    suf[x[1]] = get<1> (go[suf[v]]);
                    dp[x[1]] += dp[suf[x[1]]];
                }
            }
            if (x[2] == 0) {
                x[2] = get<2> (go[suf[v]]);
            } else {
                st.push(x[2]);
                if (v) {
                    suf[x[2]] = get<2> (go[suf[v]]);
                    dp[x[2]] += dp[suf[x[2]]];
                }
            }
            go[v] = {x[0], x[1], x[2]};
        }
    }
};

vector<AXO> a;

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int q;
    cin >> q;
    long long ans = 0;
    while (q--) {
        char c;
        cin >> c;
        if (c == '+') {
            string S;
            cin >> S;
            int n = S.size();
            rotate(S.begin(), S.begin() + ans % n, S.end());
            if (used.find(S) != used.end()) {
                continue;
            }
            used.insert(S);
            int j = 0;
            while (j < a.size() && a[j].a.size() != 0) j++;
            if (j == a.size()) a.pb(AXO());
            a[j].add(S, 1);
            for (int i = 0; i < j; i++) {
                for (int v = 0; v < (int) a[i].a.size(); v++) a[j].add(a[i].a[v], a[i].K[v]);
                a[i] = AXO();
            }
            a[j].bfs();
        }
        if (c == '-') {
            string S;
            cin >> S;
            int n = S.size();
            rotate(S.begin(), S.begin() + ans % n, S.end());
            if (used.find(S) == used.end()) continue;
            used.erase(S);
            int j = 0;
            while (j < a.size() && a[j].a.size() != 0) j++;
            if (j == a.size()) a.pb(AXO());
            a[j].add(S, -1);
            for (int i = 0; i < j; i++) {
                for (int v = 0; v < (int) a[i].a.size(); v++) a[j].add(a[i].a[v], a[i].K[v]);
                a[i] = AXO();
            }
            a[j].bfs();
        }
        if (c == '?') {
            string s;
            cin >> s;
            int n = s.size();
            rotate(s.begin(), s.begin() + ans % n, s.end());
            ans = 0;
            for (int j = 0; j < (int) a.size(); j++) {
                if (a[j].a.size() == 0) continue;
                int v = 0;
                for (auto c : s) {
                    if (c == 'a') v = get<0> (a[j].go[v]);
                    if (c == 'b') v = get<1> (a[j].go[v]);
                    if (c == 'c') v = get<2> (a[j].go[v]);
                    ans += a[j].dp[v];
                }
            }
            cout << ans << '\n';
        }
    }
}