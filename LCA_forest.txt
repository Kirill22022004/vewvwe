class LCA_forest {
public:
    int n, LG;
    vector<int> dist, comp;
    vector<vector<int>> g, up;

    void dfs(int v, int pr, int d, int c) {
        dist[v] = d;
        comp[v] = c;
        up[v].resize(LG);
        up[v][0] = pr;
        for (int j = 1; j < LG; j++) {
            up[v][j] = up[up[v][j - 1]][j - 1];
        }
        for (auto x : g[v]) {
            if (x != pr) {
                dfs(x, v, d + 1, c);
            }
        }
    }

    LCA_forest(const vector<vector<int>>& _g) {
        n = (int) _g.size();
        g = _g;
        LG = 0;
        while ((1ll << LG) <= n) LG++;
        up.resize(n);
        dist.resize(n);
        comp.resize(n, -1);
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (comp[i] == -1) {
                dfs(i, i, 0, cnt);
                cnt++;
            }
        }
    }

    int lca(int x, int y) {
        if (comp[x] != comp[y]) {
            return -1;
        }
        if (dist[x] < dist[y]) swap(x, y);
        int z = dist[x] - dist[y];
        for (int j = 0; j < LG; j++) {
            if ((z & (1 << j)) > 0) {
                x = up[x][j];
            }
        }
        if (x == y) return x;
        for (int j = LG - 1; j >= 0; j--) {
            int X = up[x][j], Y = up[y][j];
            if (X != Y) {
                x = X, y = Y;
            }
        }
        return up[x][0];
    }
    int distance(int x, int y) {
        return dist[x] + dist[y] - 2 * dist[lca(x, y)];
    }
};