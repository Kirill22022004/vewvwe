using ll = long long;
 
constexpr int MOD = 998244353;
 
// assume -P <= x < 2P
int norm(int x) {
    if (x < 0) {
        x += MOD;
    }
    if (x >= MOD) {
        x -= MOD;
    }
    return x;
}
 
struct Mint {
 
    int x;
 
    Mint(int x = 0) : x(norm(x)) {}
 
    int val() const {
        return x;
    }
 
    Mint operator-() const {
        return Mint(norm(MOD - x));
    }
 
    Mint inv() const {
        assert(x != 0);
        int p = MOD - 2, a = x, res = 1;
        for (; p > 0; p >>= 1, a = a * (long long) a % MOD)
            if (p & 1) res = res * (long long) a % MOD;
        return res;
    }
 
    Mint &operator*=(const Mint &rhs) {
        x = ll(x) * rhs.x % MOD;
        return *this;
    }
 
    Mint &operator+=(const Mint &rhs) {
        x = norm(x + rhs.x);
        return *this;
    }
 
    Mint &operator-=(const Mint &rhs) {
        x = norm(x - rhs.x);
        return *this;
    }
 
    Mint &operator/=(const Mint &rhs) {
        return *this *= rhs.inv();
    }
 
    friend Mint operator*(const Mint &lhs, const Mint &rhs) {
        Mint res = lhs;
        res *= rhs;
        return res;
    }
 
    friend Mint operator+(const Mint &lhs, const Mint &rhs) {
        Mint res = lhs;
        res += rhs;
        return res;
    }
 
    friend Mint operator-(const Mint &lhs, const Mint &rhs) {
        Mint res = lhs;
        res -= rhs;
        return res;
    }
 
    friend Mint operator/(const Mint &lhs, const Mint &rhs) {
        Mint res = lhs;
        res /= rhs;
        return res;
    }
};
 
 
Mint power(Mint a, long long b) {
    Mint res = 1;
    for (; b; b >>= 1, a *= a) {
        if (b & 1) {
            res *= a;
        }
    }
    return res;
}
 
std::vector<int> rev;
std::vector<Mint> roots{0, 1};
 
void dft(std::vector<Mint> &a) {
    int n = a.size();
    if (n == 1) return;
 
    if (int(rev.size()) != n) {
        int k = __builtin_ctz(n) - 1;
        rev.resize(n);
        for (int i = 0; i < n; i++) {
            rev[i] = rev[i >> 1] >> 1 | (i & 1) << k;
        }
    }
 
    for (int i = 0; i < n; i++) {
        if (rev[i] < i) {
            std::swap(a[i], a[rev[i]]);
        }
    }
    if (int(roots.size()) < n) {
        int k = __builtin_ctz(roots.size());
        roots.resize(n);
        while ((1 << k) < n) {
            Mint e = power(Mint(3), (MOD - 1) >> (k + 1));
            for (int i = 1 << (k - 1); i < (1 << k); i++) {
                roots[i << 1] = roots[i];
                roots[i << 1 | 1] = roots[i] * e;
            }
            k++;
        }
    }
    for (int k = 1; k < n; k <<= 1) {
        for (int i = 0; i < n; i += k << 1) {
            for (int j = 0; j < k; j++) {
                Mint u = a[i + j];
                Mint v = a[i + j + k] * roots[k + j];
                a[i + j] = u + v;
                a[i + j + k] = u - v;
            }
        }
    }
}
 
void idft(std::vector<Mint> &a) {
    int n = a.size();
    std::reverse(a.begin() + 1, a.end());
    dft(a);
    Mint inv = (1 - MOD) / n;
    for (int i = 0; i < n; i++) {
        a[i] *= inv;
    }
}
 
struct Poly {
    std::vector<Mint> a;
 
    Poly() {}
 
    Poly(const std::vector<Mint> &a) : a(a) {}
 
    Poly(const std::vector<int> &A) {
        a.resize(A.size());
        for (int i = 0; i < (int) a.size(); ++i) {
            a[i] = A[i];
        }
    }
 
    Poly(const std::initializer_list<Mint> &a) : a(a) {}
 
    int size() const {
        return a.size();
    }
 
    void resize(int n) {
        a.resize(n);
    }
 
    Mint operator[](int idx) const {
        if (idx < 0 || idx >= size()) {
            return 0;
        }
        return a[idx];
    }
 
    Mint &operator[](int idx) {
        return a[idx];
    }
 
    Poly mulxk(int k) const {
        auto b = a;
        b.insert(b.begin(), k, 0);
        return Poly(b);
    }
 
    Poly modxk(int k) const {
        k = std::min(k, size());
        return Poly(std::vector<Mint>(a.begin(), a.begin() + k));
    }
 
    Poly divxk(int k) const {
        if (size() <= k) {
            return Poly();
        }
        return Poly(std::vector<Mint>(a.begin() + k, a.end()));
    }
 
    void norm() {
        while (!a.empty() && a.back().x == 0) a.pop_back();
    }
 
    friend Poly operator+(const Poly &a, const Poly &b) {
        std::vector<Mint> res(std::max(a.size(), b.size()));
        for (int i = 0; i < int(res.size()); i++) {
            res[i] = a[i] + b[i];
        }
        return Poly(res);
    }
 
    friend Poly operator-(const Poly &a, const Poly &b) {
        std::vector<Mint> res(std::max(a.size(), b.size()));
        for (int i = 0; i < int(res.size()); i++) {
            res[i] = a[i] - b[i];
        }
        return Poly(res);
    }
 
    friend Poly operator*(Poly a, Poly b) {
        if (a.size() == 0 || b.size() == 0) {
            return Poly();
        }
        int sz = 1, tot = a.size() + b.size() - 1;
        while (sz < tot)
            sz <<= 1;
        a.a.resize(sz);
        b.a.resize(sz);
        dft(a.a);
        dft(b.a);
        for (int i = 0; i < sz; ++i) {
            a.a[i] = a[i] * b[i];
        }
        idft(a.a);
        a.resize(tot);
        return a;
    }
 
    friend Poly operator*(Mint a, Poly b) {
        for (int i = 0; i < int(b.size()); i++) {
            b[i] *= a;
        }
        return b;
    }
 
    friend Poly operator*(Poly a, Mint b) {
        for (int i = 0; i < int(a.size()); i++) {
            a[i] *= b;
        }
        return a;
    }
 
    Poly &operator+=(Poly b) {
        return (*this) = (*this) + b;
    }
 
    Poly &operator-=(Poly b) {
        return (*this) = (*this) - b;
    }
 
    Poly &operator*=(Poly b) {
        return (*this) = (*this) * b;
    }
 
    Poly deriv() const {
        if (a.empty()) {
            return Poly();
        }
        std::vector<Mint> res(size() - 1);
        for (int i = 0; i < size() - 1; ++i) {
            res[i] = (i + 1) * a[i + 1];
        }
        return Poly(res);
    }
 
    Poly integr() const {
        std::vector<Mint> res(size() + 1);
        for (int i = 0; i < size(); ++i) {
            res[i + 1] = a[i] / (i + 1);
        }
        return Poly(res);
    }
 
    Poly inv(int m) const {
        Poly x{a[0].inv()};
        int k = 1;
        while (k < m) {
            k <<= 1;
            x = (x * (Poly{2} - modxk(k) * x)).modxk(k);
        }
        return x.modxk(m);
    }
 
    Poly log(int m) const {
        return (deriv() * inv(m)).integr().modxk(m);
    }
 
    Poly exp(int m) const {
        Poly x{1};
        int k = 1;
        while (k < m) {
            k <<= 1;
            x = (x * (Poly{1} - x.log(k) + modxk(k))).modxk(k);
        }
        return x.modxk(m);
    }
 
    Poly rev() const {
        vector<Mint> res(a);
        reverse(res.begin(), res.end());
        return Poly(res);
    }
 
    Poly rev(size_t sz) const { //last sz
        vector<Mint> res(a);
        res.resize(max(sz, a.size()));
        return Poly(vector(res.rbegin(), res.rbegin() + sz));
    }
 
    pair<Poly, Poly> divmod(const Poly &oth) const {
        assert(oth.size());
        if (size() < oth.size()) {
            return {Poly{0}, *this};
        }
        int d = size() - oth.size();
        Poly D = (rev().modxk(d + 1) * oth.rev().inv(d + 1)).modxk(d + 1).rev(d + 1);
        auto rem = *this - D * oth;
        while (rem.size() && rem.a.back().x == 0) {
            rem.a.pop_back();
        }
        return {D, rem};
    }
 
    Poly mod(Poly oth) const {
        return divmod(oth).second;
    }
 
    Poly div(Poly oth) const {
        return divmod(oth).first;
    }
 
    Poly pow(int k, int m) const {
        int i = 0;
        while (i < size() && a[i].val() == 0) {
            i++;
        }
        if (i == size() || 1LL * i * k >= m) {
            return Poly(std::vector<Mint>(m));
        }
        Mint v = a[i];
        auto f = divxk(i) * v.inv();
        return (f.log(m - i * k) * k).exp(m - i * k).mulxk(i * k) * power(v, k);
    }
 
    Poly sqrt(int m) const {
        Poly x{1};
        int k = 1;
        while (k < m) {
            k <<= 1;
            x = (x + (modxk(k) * x.inv(k)).modxk(k)) * ((MOD + 1) >> 1);
        }
        return x.modxk(m);
    }
 
    Poly mulT(Poly b) const {
        if (b.size() == 0) {
            return Poly();
        }
        int n = b.size();
        std::reverse(b.a.begin(), b.a.end());
        return ((*this) * b).divxk(n - 1);
    }
 
    Mint eval(Mint x) const {
        Mint res{};
        for (int i = size() - 1; i >= 0; --i) {
            res *= x;
            res += a[i];
        }
        return res;
    }
 
    std::vector<Mint> eval(std::vector<Mint> x) const {
        if (size() == 0) {
            return std::vector<Mint>(x.size(), 0);
        }
        const int n = std::max(int(x.size()), size());
        std::vector<Poly> q(4 * n);
        std::vector<Mint> ans(x.size());
        x.resize(n);
        std::function<void(int, int, int)> build = [&](int p, int l, int r) {
            if (r - l == 1) {
                q[p] = Poly{1, -x[l]};
            } else {
                int m = (l + r) >> 1;
                build(p << 1, l, m);
                build(p << 1 | 1, m, r);
                q[p] = q[p << 1] * q[p << 1 | 1];
            }
        };
        build(1, 0, n);
        std::function<void(int, int, int, const Poly &)> work = [&](int p, int l, int r, const Poly &num) {
            if (r - l == 1) {
                if (l < int(ans.size())) {
                    ans[l] = num[0];
                }
            } else {
                int m = (l + r) >> 1;
                work(p << 1, l, m, num.mulT(q[p << 1 | 1]).modxk(m - l));
                work(p << 1 | 1, m, r, num.mulT(q[p << 1]).modxk(r - m));
            }
        };
        work(1, 0, n, mulT(q[1].inv(n)));
        return ans;
    }
 
    Poly inter(vector<Poly> &tree, int p, vector<Mint>::iterator lx, vector<Mint>::iterator rx,
               vector<Mint>::iterator ly, vector<Mint>::iterator ry) {
        if (rx - 1 == lx) {
            return {*ly / a[0]};
        } else {
            auto mx = lx + (rx - lx) / 2;
            auto my = ly + (ry - ly) / 2;
            auto A = ((*this).mod(tree[p << 1])).inter(tree, p << 1, lx, mx, ly, my);
            auto B = ((*this).mod(tree[p << 1 | 1])).inter(tree, p << 1 | 1, mx, rx, my, ry);
            return A * tree[p << 1 | 1] + B * tree[p << 1];
        }
    }
};
 
Poly inter(vector<Mint> x, vector<Mint> y) {
    int n = x.size();
    vector<Poly> tree(4 * n);
 
    std::function<void(int, int, int)> build = [&](int p, int l, int r) {
        if (r - l == 1) {
            tree[p] = Poly{-x[l], 1};
        } else {
            int m = (l + r) >> 1;
            build(p << 1, l, m);
            build(p << 1 | 1, m, r);
            tree[p] = tree[p << 1] * tree[p << 1 | 1];
        }
    };
    build(1, 0, n);
 
    Poly save = tree[1].deriv();
    save = save.inter(tree, 1, x.begin(), x.end(), y.begin(), y.end());
    save.norm();
    return save;
}