#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

struct mst {
    int n;
    vector<ordered_set> t;
    vector<int> a;

    void build(int v, int l, int r) {
        for (int i = l; i < r; i++) {
            t[v].insert({a[i], i});
        }
        if (l + 1 != r) {
            int m = (l + r) / 2;
            build(v * 2 + 1, l, m);
            build(v * 2 + 2, m, r);
        }
    }

    void build(vector<int> b) {
        n = (int) b.size();
        t.resize(4 * n);
        a = b;
        build(0, 0, n);
    }

    void update(int v, int l, int r, int i, int x) {
        t[v].erase({a[i], i});
        t[v].insert({x, i});
        if (l + 1 != r) {
            int m = (l + r) / 2;
            if (i < m) {
                update(v * 2 + 1, l, m, i, x);
            } else {
                update(v * 2 + 2, m, r, i, x);
            }
        }
    }

    void set(int pos, int x) {
        update(0, 0, n, pos, x);
        a[pos] = x;
    }

    int get(int v, int l, int r, int l1, int r1, int x) {
        if (l1 >= r || l >= r1) {
            return 0;
        }
        if (l1 <= l && r <= r1) {
            return t[v].order_of_key({x, -1});
        }
        int m = (l + r) / 2;
        return get(v * 2 + 1, l, m, l1, r1, x) + get(v * 2 + 2, m, r, l1, r1, x);
    }

    int get_smaller(int l, int r, int x) {
        return get(0, 0, n, l, r + 1, x);
    }

    int get_bigger(int l, int r, int x) {
        return r - l + 1 - get_smaller(l, r, x + 1);
    }

    int get(int l, int r, int x, int y) {
        // v in [l, r] x <= v && v <= y
        return get_smaller(l, r, y + 1) - get_smaller(l, r, x);
    }
};