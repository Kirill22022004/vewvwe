vector<int> find_kss(vector<vector<int>>& g) {
    int n = g.size();
    vector<vector<int>> g2(n);
    for (int i = 0; i < n; i++) {
        for (auto x : g[i]) {
            g2[x].push_back(i);
        }
    }
    vector<int> ts, comp(n, -1);
    vector<bool> used(n, false);
    function<void(int)> topsort = [&] (int v) {
        used[v] = true;
        for (auto x : g[v]) {
            if (!used[x]) {
                topsort(x);
            }
        }
        ts.push_back(v);
    };
    function<void(int, int)> dfs = [&] (int v, int c) {
        comp[v] = c;
        for (auto x : g2[v]) {
            if (comp[x] == -1) {
                dfs(x, c);
            }
        }
    };
    for (int i = 0; i < n; i++) {
        if (!used[i]) {
            topsort(i);
        }
    }
    reverse(ts.begin(), ts.end());
    int cnt = 0;
    for (auto x : ts) {
        if (comp[x] == -1) {
            dfs(x, cnt);
            cnt++;
        }
    }
    return comp;
}