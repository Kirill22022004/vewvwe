void number_sort(vector<int>& p, vector<int>& c) {
    int n = p.size();
    vector<int> cnt(n, 0), pos(n, 0), new_p(n, 0);
    for (int i = 0; i < n; i++) cnt[c[i]]++;
    for (int i = 1; i < n; i++) pos[i] = pos[i - 1] + cnt[i - 1];
    for (int i = 0; i < n; i++) {
        int x = c[p[i]];
        new_p[pos[x]] = p[i];
        pos[x]++;
    }
    p = new_p;
}

vector<int> suffarr(string &s) {
    char mn = 32;
    s += mn;
    int n = s.size();
    vector<int> p(n), c(n);
    vector<pair<char, int>> a(n);
    for (int i = 0; i < n; i++) a[i] = {s[i], i};
    sort(a.begin(), a.end());
    for (int i = 0; i < n; i++) p[i] = a[i].second;
    for (int i = 1; i < n; i++) {
        c[p[i]] = c[p[i - 1]] + (a[i].first != a[i - 1].first);
    }
    int k = 0;
    while ((1 << k) < n) {
        for (int i = 0; i < n; i++) {
            p[i] = (p[i] - (1 << k) + n) % n;
        }
        number_sort(p, c);
        vector<int> new_c(n, 0);
        for (int i = 1; i < n; i++) {
            pair<int, int> t1 = {c[p[i]], c[(p[i] + (1 << k)) % n]};
            pair<int, int> t2 = {c[p[i - 1]], c[(p[i - 1] + (1 << k)) % n]};
            new_c[p[i]] =  new_c[p[i - 1]] + (t1 != t2);
        }
        c = new_c;
        k++;
    }
    p.erase(p.begin());
    s.pop_back();
    return p;
}

vector<int> get_lcp(string &s, vector<int> &p) {
    int n = s.size();
    vector<int> pos(n);
    for (int i = 0; i < n; i++) pos[p[i]] = i;
    int l = 0;
    vector<int> lcp(n - 1);
    for (int i = 0; i < n; i++) {
        if (pos[i] == n - 1) {
            l = 0;
            continue;
        }
        int j = p[pos[i] + 1];
        while (i + l < n && j + l < n && s[i + l] == s[j + l]) l++;
        lcp[pos[i]] = l;
        l = max(0, l - 1);
    }
    return lcp;
}