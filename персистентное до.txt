#include<bits/stdc++.h>

using namespace std;

#define pii pair<int, int>
#define fi first
#define se second

struct node {
    int x = 0, y = 0, cnt = 0;
    node* l;
    node* r;
    node() {}
    node(int x) : x(x), y((rand() << 16) + rand()), cnt(1), l(nullptr), r(nullptr) {}
};

typedef node* pnode;

void update(pnode t) {
    t->cnt = 1;
    if (t->l) {
        t->cnt += t->l->cnt;
    }
    if (t->r) {
        t->cnt += t->r->cnt;
    }
}

pnode merge(pnode a, pnode b) {
    if (!a) return b;
    if (!b) return a;
    if (a->y < b->y) {
        a->r = merge(a->r, b);
        update(a);
        return a;
    } else {
        b->l = merge(a, b->l);
        update(b);
        return b;
    }
}

pair<pnode, pnode> split(pnode a, int x) {
    if (!a) return {nullptr, nullptr};
    if (a->x <= x) {
        auto res = split(a->r, x);
        a->r = res.fi;
        update(a);
        return {a, res.se};
    } else {
        auto res = split(a->l, x);
        a->l = res.se;
        update(a);
        return {res.fi, a};
    }
}

pair<pnode, pnode> split2(pnode a, int x) {
    if (!a) return {nullptr, nullptr};
    int c = 1;
    if (a->l) c += a->l->cnt;
    if (c <= x) {
        auto res = split2(a->r, x - c);
        a->r = res.fi;
        update(a);
        return {a, res.se};
    } else {
        auto res = split2(a->l, x);
        a->l = res.se;
        update(a);
        return {res.fi, a};
    }
}

void insert(pnode& a, int x) {
    auto res = split(a, x);
    pnode A = new node(x);
    a = merge(res.fi, merge(A, res.se));
}

void erase(pnode& a, int x) {
    auto res = split(a, x - 1);
    auto res2 = split2(res.se, 1);
    a = merge(res.fi, res2.se);
}

pii solve(pnode& a, int x, int y) {
    pii ans = {0, 0};
    if ((y - x) % 2 == 0) {
        int m = (x + y) / 2;
        auto res = split(a, m - 1);
        auto res2 = split(res.se, m);
        if (res.fi) ans.fi = res.fi->cnt;
        if (res2.se) ans.se = res2.se->cnt;
        a = merge(res.fi, merge(res2.fi, res2.se));
    } else {
        int m = (x + y) / 2;
        auto res = split(a, m);
        if (res.fi) ans.fi = res.fi->cnt;
        if (res.se) ans.se = res.se->cnt;
        a = merge(res.fi, res.se);
    }
    return ans;
}

vector<pnode> t;
vector<int> z;

void update(int v, int l, int r, int i, int x, int x2) {
    insert(t[v], x2);
    erase(t[v], x);
    if (l + 1 == r) return;
    int m = (l + r) / 2;
    if (i < m) {
        update(v * 2 + 1, l, m, i, x, x2);
    } else {
        update(v * 2 + 2, m, r, i, x, x2);
    }
}

void build(int v, int l, int r) {
    for (int i = l; i < r; i++) {
        insert(t[v], z[i]);
    }
    if (l + 1 != r) {
        int m = (l + r) / 2;
        build(v * 2 + 1, l, m);
        build(v * 2 + 2, m, r);
    }
}

pii get(int v, int l, int r, int l1, int r1, int L, int R) {
    if (l1 >= r || l >= r1) return {0, 0};
    if (l1 <= l && r <= r1) {
        return solve(t[v], L, R);
    }
    int m = (l + r) / 2;
    pii res = get(v * 2 + 1, l, m, l1, r1, L, R);
    pii res2 = get(v * 2 + 2, m, r, l1, r1, L, R);
    return {res.fi + res2.fi, res.se + res2.se};
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    t.resize(4 * n);
    z.resize(n);
    for (int i = 0; i < n; i++) cin >> z[i];
    build(0, 0, n);
    int q;
    cin >> q;
    while (q--) {
        char c;
        cin >> c;
        if (c == 'C') {
            int x, z2;
            cin >> x >> z2;
            x--;
            update(0, 0, n, x, z[x], z2);
            z[x] = z2;
        } else {
            int x, y, x2, y2;
            cin >> x >> y >> x2 >> y2;
            x--, x2--;
            pii res = get(0, 0, n, x, x2 + 1, y, y2);
            if (res.fi > res.se) {
                cout << 1;
            } else if (res.se > res.fi) {
                cout << 2;
            } else {
                cout << 0;
            }
            cout << '\n';
        }
    }
}