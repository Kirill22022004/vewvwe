template <class T> class flow_graph {
 public:
    struct edge {
        int to;
        T c;
        T f;
        int rev;
    };
    vector<vector<edge>> g;
    vector<bool> used;
    int n;
    int st, fin;
    bool modified;
    T flow;
    flow_graph(int n, int st, int fin) : n(n), st(st), fin(fin) {
        modified = true;
        assert(0 <= st && st < n && 0 <= fin && fin < n && st != fin);
        g.resize(n);
        used.resize(n, false);
    }
    void clear() {
        used.resize(n, false);
        modified = true;
        for (int i = 0; i < n; i++) {
            for (edge& e : g[i]) {
                e.f = 0;
            }
        }
    }
    void add(int from, int to, T forward_cap, T backward_cap) {
        modified = true;
        assert(0 <= from && from < n && 0 <= to && to < n);
        int from_size = g[from].size();
        int to_size = g[to].size();
        g[from].push_back({to, forward_cap, 0, to_size});
        g[to].push_back({from, backward_cap, 0, from_size});
    }
    T dfs(int v, T w) {
        used[v] = true;
        if (v == fin) {
            return w;
        }
        for (auto& e : g[v]) {
            if (!used[e.to] && e.c > e.f) {
                T tmp = e.c - e.f;
                if (v != st) tmp = min(tmp, w);
                int d = dfs(e.to, tmp);
                if (d != 0) {
                    e.f += d;
                    g[e.to][e.rev].f -= d;
                    return d;
                }
            }
        }
        return 0;
    }
    T max_flow() {
        if (!modified) {
            return flow;
        }
        modified = false;
        T ans = 0;
        while (true) {
            used.assign(n, false);
            T c = dfs(st, -1);
            if (c == 0) break;
            ans += c;
        }
        return flow = ans;
    }
    vector<bool> min_cut() {
        max_flow();
        return used;
    }
};