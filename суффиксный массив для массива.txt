void number_sort(vector<int>& p, vector<int>& c) {
    int n = p.size();
    vector<int> cnt(n, 0), pos(n, 0), new_p(n, 0);
    for (int i = 0; i < n; i++) cnt[c[i]]++;
    for (int i = 1; i < n; i++) pos[i] = pos[i - 1] + cnt[i - 1];
    for (int i = 0; i < n; i++) {
        int x = c[p[i]];
        new_p[pos[x]] = p[i];
        pos[x]++;
    }
    p = new_p;
}

vector<int> sufmas(vector<int> s) {
    s.push_back(-1);
    int n = s.size();
    vector<int> p(n, 0), c(n, 0);
    vector<pair<int, int>> a(n);
    for (int i = 0; i < n; i++) a[i] = {s[i], i};
    sort(a.begin(), a.end());
    for (int i = 0; i < n; i++) p[i] = a[i].second;
    for (int i = 1; i < n; i++) {
        c[p[i]] = c[p[i - 1]] + (a[i].first != a[i - 1].first);
    }
    int k = 0;
    while ((1 << k) < n) {
        for (int i = 0; i < n; i++) {
            p[i] = (p[i] - (1 << k) + n) % n;
        }
        number_sort(p, c);
        vector<int> new_c(n, 0);
        for (int i = 1; i < n; i++) {
            pair<int, int> t1 = {c[p[i]], c[(p[i] + (1 << k)) % n]};
            pair<int, int> t2 = {c[p[i - 1]], c[(p[i - 1] + (1 << k)) % n]};
            new_c[p[i]] =  new_c[p[i - 1]] + (t1 != t2);
        }
        c = new_c;
        k++;
    }
    vector<int> ans;
    for (int i = 1; i < n; i++) ans.push_back(p[i]);
    return ans;
}