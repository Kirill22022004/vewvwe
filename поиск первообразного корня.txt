int binpow(int x, int n, int mod) {
    if (n == 0) return 1 % mod;
    int res = 1;
    if (n % 2 == 1) res *= x;
    return (binpow((x * x) % mod, n / 2, mod) * res) % mod;
}

int eiler(int x) {
    int res = x;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            while (x % i == 0) x /= i;
            res -= res / i;
        }
    }
    if (x > 1) res -= res / x;
    return res;
}

int find_PK(int p) {
    if (p == 1) return 1;
    int f = eiler(p), x = f;
    vector<int> fact;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            fact.push_back(i);
            while (x % i == 0) x /= i;
        }
    }
    if (x > 1) fact.push_back(x);
    for (int i = 0; i < p; i++) {
        if (__gcd(i, p) > 1) continue;
        bool ans = true;
        for (auto x : fact) {
            if (binpow(i, f / x, p) == 1) ans = false;
        }
        if (ans) return i;
    }
    return -1;
}