int get_size(int n, int m, int x, int y, int x2, int y2) {
    assert(0 <= x && x < n);
    assert(0 <= y && y < m);
    assert(0 <= x2 && x2 < n);
    assert(0 <= y2 && y2 < m);
    if (x == x2 && y == y2) {
        return 1;
    }
    bool eq = ((x + y) % 2 == (x2 + y2) % 2);
    int N = n * m;
    if (n > m) {
        return get_size(m, n, y, x, y2, x2);
    }
    if (n == 1) {
        return abs(y - y2) + 1;
    }
    if (n == 2 && x != x2 && abs(y - y2) <= 1) {
        return max(y + 1 + y2 + 1, 2 * m - y - y2);
    }
    if (n == 3 && m % 2 == 0 && !eq) {
        for (int t : {0, 1}) {
            y = m - y - 1;
            y2 = m - y2 - 1;
            if ((x + y) % 2 == 0) {
                swap(x, x2);
                swap(y, y2);
            }
            if ((x == 1 && y < y2) || (y < y2 - 1)) {
                return N - 2;
            }
        }
    }
    if (N % 2 == 0) {
        return N - eq;
    }
    if (!eq) {
        return N - 1;
    }
    if ((x + y) % 2 == 0) {
        return N;
    }
    return N - 2;
}

string build_path(int n, int m, int x, int y, int x2, int y2) {
    assert(0 <= x && x < n);
    assert(0 <= y && y < m);
    assert(0 <= x2 && x2 < n);
    assert(0 <= y2 && y2 < m);
    if (make_pair(x, y) == make_pair(x2, y2)) {
        return "";
    }
    if (n > m) {
        string ans = build_path(m, n, y, x, y2, x2);
        for (auto& c : ans) {
            if (c == 'R') {
                c = 'D';
            } else if (c == 'D') {
                c = 'R';
            } else if (c == 'L') {
                c = 'U';
            } else {
                c = 'L';
            }
        }
        return ans;
    }
    if (x > x2) {
        string ans = build_path(n, m, x2, y2, x, y);
        for (auto& c : ans) {
            if (c == 'R') {
                c = 'L';
            } else if (c == 'D') {
                c = 'U';
            } else if (c == 'L') {
                c = 'R';
            } else {
                c = 'D';
            }
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
    if (y > y2) {
        string ans = build_path(n, m, x, m - 1 - y, x2, m - 1 - y2);
        for (auto& c : ans) {
            if (c == 'R') {
                c = 'L';
            } else if (c == 'D') {
                c = 'D';
            } else if (c == 'L') {
                c = 'R';
            } else {
                c = 'U';
            }
        }
        return ans;
    }
    assert(n <= m && x <= x2 && y <= y2);
    { // first big case
        for (int i = x; i < x2; i++) {
            for (int j = 0; j < m; j++) {
                if (get_size(i + 1, m, x, y, i, j) + get_size(n - i - 1, m, 0, j, x2 - i - 1, y2) ==
                    get_size(n, m, x, y, x2, y2)) {
                    return build_path(i + 1, m, x, y, i, j) + "D" + build_path(n - i - 1, m, 0, j, x2 - i - 1, y2);
                }
            }
        }
        for (int j = y; j < y2; j++) {
            for (int i = 0; i < n; i++) {
                if (get_size(n, j + 1, x, y, i, j) + get_size(n, m - j - 1, i, 0, x2, y2 - j - 1) ==
                    get_size(n, m, x, y, x2, y2)) {
                    return build_path(n, j + 1, x, y, i, j) + "R" + build_path(n, m - j - 1, i, 0, x2, y2 - j - 1);
                }
            }
        }
    }
    { // second big case
        if (n >= 3 && get_size(n, m, x, y, x2, y2) >= n * m - 1) {
            if (max(y, y2) + 2 < m && get_size(n, m - 2, x, y, x2, y2) >= n * (m - 2) - 1) {
                string ans = build_path(n, m - 2, x, y, x2, y2);
                for (int i = 0; i < (int) ans.size(); i++) {
                    int vx = x, vy = y;
                    if (ans[i] == 'R') {
                        vy++;
                    }
                    if (ans[i] == 'L') {
                        vy--;
                    }
                    if (ans[i] == 'D') {
                        vx++;
                    }
                    if (ans[i] == 'U') {
                        vx--;
                    }
                    if (y == m - 3 && vy == m - 3) {
                        return ans.substr(0, i) + "R" + build_path(n, 2, x, 0, vx, 0) + "L" + ans.substr(i + 1);
                    }
                    x = vx, y = vy;
                }
            }
            if (min(y, y2) > 1 && get_size(n, m - 2, x, y - 2, x2, y2 - 2) >= n * (m - 2) - 1) {
                string ans = build_path(n, m - 2, x, y - 2, x2, y2 - 2);
                for (int i = 0; i < (int) ans.size(); i++) {
                    int vx = x, vy = y;
                    if (ans[i] == 'R') {
                        vy++;
                    }
                    if (ans[i] == 'L') {
                        vy--;
                    }
                    if (ans[i] == 'D') {
                        vx++;
                    }
                    if (ans[i] == 'U') {
                        vx--;
                    }
                    if (y == 2 && vy == 2) {
                        return ans.substr(0, i) + "L" + build_path(n, 2, x, 1, vx, 1) + "R" + ans.substr(i + 1);
                    }
                    x = vx, y = vy;
                }
            }
        }
        if (m >= 3 && get_size(n, m, x, y, x2, y2) >= n * m - 1) {
            if (max(x, x2) + 2 < n && get_size(n - 2, m, x, y, x2, y2) >= (n - 2) * m - 1) {
                string ans = build_path(n - 2, m, x, y, x2, y2);
                for (int i = 0; i < (int) ans.size(); i++) {
                    int vx = x, vy = y;
                    if (ans[i] == 'R') {
                        vy++;
                    }
                    if (ans[i] == 'L') {
                        vy--;
                    }
                    if (ans[i] == 'D') {
                        vx++;
                    }
                    if (ans[i] == 'U') {
                        vx--;
                    }
                    if (x == n - 3 && vx == n - 3) {
                        return ans.substr(0, i) + "D" + build_path(2, m, 0, y, 0, vy) + "U" + ans.substr(i + 1);
                    }
                    x = vx, y = vy;
                }
            }
            if (min(x, x2) > 1 && get_size(n - 2, m, x - 2, y, x2 - 2, y2) >= (n - 2) * m - 1) {
                string ans = build_path(n - 2, m, x - 2, y, x2 - 2, y2);
                for (int i = 0; i < (int) ans.size(); i++) {
                    int vx = x, vy = y;
                    if (ans[i] == 'R') {
                        vy++;
                    }
                    if (ans[i] == 'L') {
                        vy--;
                    }
                    if (ans[i] == 'D') {
                        vx++;
                    }
                    if (ans[i] == 'U') {
                        vx--;
                    }
                    if (x == 2 && vx == 2) {
                        return ans.substr(0, i) + "U" + build_path(2, m, 1, y, 1, vy) + "D" + ans.substr(i + 1);
                    }
                    x = vx, y = vy;
                }
            }
        }
    }
    cerr << "size of bruteforce : " << n << " " << m << endl;
    // bruteforce
    string ans = "";
    string tmp = "";
    vector<vector<bool>> used(n, vector<bool> (m));
    function<void(int, int)> dfs = [&] (int x, int y) {
        if (used[x][y]) {
            return;
        }
        if (x == x2 && y == y2) {
            if ((int) tmp.size() > (int) ans.size()) {
                ans = tmp;
            }
            return;
        }
        used[x][y] = true;
        if (x > 0) {
            tmp += 'U';
            dfs(x - 1, y);
            tmp.pop_back();
        }
        if (y > 0) {
            tmp += 'L';
            dfs(x, y - 1);
            tmp.pop_back();
        }
        if (x + 1 < n) {
            tmp += 'D';
            dfs(x + 1, y);
            tmp.pop_back();
        }
        if (y + 1 < m) {
            tmp += 'R';
            dfs(x, y + 1);
            tmp.pop_back();
        }
        used[x][y] = false;
    };
    dfs(x, y);
    assert((int) ans.size() + 1 == get_size(n, m, x, y, x2, y2));
    return ans;
}